---
name: build and test

on:
  merge_group:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]

concurrency:
  group: build_and_test_${{ github.head_ref || github.ref_name }}
  cancel-in-progress: true

jobs:

  preflight:
    name: Pre-flight checks
    runs-on: ubuntu-22.04
    steps:

    - name: Checkout
      uses: actions/checkout@v4

    - name: Pull docker/ci image
      run: docker pull ghcr.io/${{ github.repository }}/ci:$(./docker/compute_ci_hash.sh)

    - name: Abort with meaningful error message (on failure)
      if: ${{ failure() }}
      run: |
        echo "::error::There was an error pulling the required ci docker image (see previous action)!"
        echo "::error::This often happens if there is no image available for the required hash:"
        echo "::error::    ./docker/compute_ci_hash.sh gives"
        echo "::error::    $(./docker/compute_ci_hash.sh)"
        echo "::error::Consider to generate the required images by visiting"
        echo "::error::    https://github.com/dune-gdt/dune-gdt/actions/workflows/docker_build_images.yml"
        echo "::error::and running the workflow (butten in the upper right) for the current branch!"
        exit 1

  build:
    name: Build
    needs: preflight
    runs-on: ubuntu-22.04
    env:
      OPTS: gcc-debug.ninja
    steps:

    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        fetch-tags: true
        submodules: recursive

    # This step should not fail, as we checked this in prefligh
    - name: Pull docker/ci image
      run: docker pull ghcr.io/${{ github.repository }}/ci:$(./docker/compute_ci_hash.sh)

    - name: Configure
      run: |
        OPTS=${OPTS} ./docker/run_ci.sh '${DUNECONTROL} configure'

    - name: Upload error logs (on failure)
      if: ${{ failure() }}
      uses: actions/upload-artifact@v4
      with:
        name: configure_log_${OPTS}
        if-no-files-found: error
        path: |
          build-dune-gdt-ci/*/CMakeFiles/CMakeError.log
          build-dune-gdt-ci/*/CMakeFiles/CMakeOutput.log

    - name: Build all
      run: |
        OPTS=${OPTS} ./docker/run_ci.sh '${DUNECONTROL} all'

    - name: Build all 2nd time
      run: |
        OPTS=${OPTS} ./docker/run_ci.sh '${DUNECONTROL} bexec "ninja all"'

    - name: Build all 3rd time
      run: |
        OPTS=${OPTS} ./docker/run_ci.sh '${DUNECONTROL} bexec "ninja all"'

    - name: Abort with meaningful error message (on failure)
      if: ${{ failure() }}
      run: |
        echo "::error::There was an error configuring or building (see above)! To reproduce the failure locally, execute"
        echo "::error::    git clone https://github.com/dune-gdt/dune-gdt.git"
        echo "::error::    cd dune-gdt"
        echo "::error::    git checkout -b ${{ github.ref }} ${{ github.event.pull_request.base.sha }}"
        echo "::error::    git merge ${{ github.event.pull_request.head.sha }}"
        echo "::error::    git submodule update --init --recursive"
        echo "::error::    OPTS=${OPTS} ./docker/run_ci.sh '\${DUNECONTROL} configure'"
        echo "::error::"
        echo "::error::An interactive shell can afterwards be obtained by"
        echo "::error::    DOCKER_RUN_CI_ARGS=-i OPTS=${OPTS} ./docker/run_ci.sh /bin/bash"
        exit 1

    - uses: actions/cache/save@v4
      name: Store build dir
      with:
        path: build-dune-gdt-ci/gcc-debug.ninja
        key: build
        enableCrossOsArchive: true

  cpp_test:
    name: C++ Tests
    needs: build
    runs-on: ubuntu-22.04
    env:
      OPTS: gcc-debug.ninja
    steps:

    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        fetch-tags: true
        submodules: recursive

    # This step should not fail, as we checked this in prefligh
    - name: Pull docker/ci image
      run: docker pull ghcr.io/${{ github.repository }}/ci:$(./docker/compute_ci_hash.sh)

    - uses: actions/cache/restore@v4
      id: restore
      name: Restore build dir
      with:
        path: build-dune-gdt-ci/gcc-debug.ninja
        fail-on-cache-miss: true
        key: build

    - name: Report on cache hit
      run: |
        if [ "${{ steps.restore.outputs.cache-hit }}" == "true" ]; then
          echo "Cache hit"
        else
          echo "Cache miss"
        fi

    - name: Build all
      run: |
        OPTS=${OPTS} ./docker/run_ci.sh '${DUNECONTROL} all'

  #   - name: Check headers
  #     run: |
  #       OPTS=${OPTS} ./docker/run_ci.sh '${DUNECONTROL} bexec "ninja dxt_headercheck"'

  # cpp_tests:
  #   name: Build and run C++ tests
  #   needs: preflight
  #   runs-on: ubuntu-22.04
  #   timeout-minutes: 180
  #   env:
  #     OPTS: gcc-debug.ninja
  #     DXT_TEST_TIMEOUT: 1200
  #     DXT_TEST_PROCS: 2
  #   steps:
  #   - name: Checkout
  #     uses: actions/checkout@v4
  #     with:
  #       fetch-depth: 0
  #       fetch-tags: true
  #       submodules: recursive
  #   - name: Pull ci image
  #     run: docker pull ghcr.io/${{ github.repository }}/ci:$(./docker/compute_ci_hash.sh)
  #   - name: Abort with meaningful error message (on failure)
  #     if: ${{ failure() }}
  #     run: echo "See the preflight job for details on how to resolve this!"
  #   - name: Configure
  #     run: |
  #       OPTS=${OPTS} ./docker/run_ci.sh '${DUNECONTROL} configure'
  #   - name: Abort with meaningful error message (on failure)
  #     if: ${{ failure() }}
  #     run: echo "See the headercheck job for details on how to resolve this!"
  #   - name: Build tests
  #     run: |
  #       OPTS=${OPTS} ./docker/run_ci.sh '${DUNECONTROL} bexec "ninja -j 1 test_binaries"'
  #   - name: Run tests
  #     run: |
  #       OPTS=${OPTS} ./docker/run_ci.sh '${DUNECONTROL} bexec ctest "-V --timeout ${DXT_TEST_TIMEOUT} -j ${DXT_TEST_PROCS}"'

  # python_bindings_and_tests:
  #   name: Build Python bindings and run Python tests
  #   needs: preflight
  #   runs-on: ubuntu-22.04
  #   env:
  #     OPTS: gcc-debug.ninja
  #   steps:
  #   - name: Checkout
  #     uses: actions/checkout@v4
  #     with:
  #       fetch-depth: 0
  #       fetch-tags: true
  #       submodules: recursive
  #   - name: Pull ci image
  #     run: docker pull ghcr.io/${{ github.repository }}/ci:$(./docker/compute_ci_hash.sh)
  #   - name: Abort with meaningful error message (on failure)
  #     if: ${{ failure() }}
  #     run: echo "See the preflight job for details on how to resolve this!"
  #   - name: Configure
  #     run: |
  #       OPTS=${OPTS} ./docker/run_ci.sh '${DUNECONTROL} configure'
  #   - name: Abort with meaningful error message (on failure)
  #     if: ${{ failure() }}
  #     run: echo "See the headercheck job for details on how to resolve this!"
  #   - name: Build all
  #     run: |
  #       OPTS=${OPTS} ./docker/run_ci.sh '${DUNECONTROL} all'
  #   - name: Build bindings
  #     run: |
  #       OPTS=${OPTS} ./docker/run_ci.sh '${DUNECONTROL} bexec "ninja -j 1 bindings"'
  #   - name: Install dependencies into virtualenv
  #     run: |
  #       python -m pip install pytest pytest-cov hypothesis codecov
  #   - name: Run Python tests
  #     run: |
  #       OPTS=${OPTS} ./docker/run_ci.sh '${DUNECONTROL} bexec "ninja test_python"'
