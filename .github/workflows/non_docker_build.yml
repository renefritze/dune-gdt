---
name: Non-docker Build and Test

on:
  push:
    branches: [main]
  pull_request:
  workflow_dispatch:

# Add concurrency to cancel in-progress jobs
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-linux:
    name: Build on Linux
    runs-on: ubuntu-24.04
    timeout-minutes: 120

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-tags: true
        fetch-depth: 0

    - name: Restore build cache
      uses: actions/cache/restore@v3
      with:
        path: build
        key: ${{ runner.os }}-build

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ninja-build

    - name: Configure CMake
      id: configure_cmake
      run: cmake --preset=debug

    - name: Build
      run: cmake --build --preset=debug --parallel

    - name: Build test binaries
      run: |
        cmake --build --preset=debug --target test_binaries --parallel -- -l 2

    - name: Test with CTest
      run: |
        ctest --preset=debug

    - name: Save build cache
      if: ${{ success() && steps.configure_cmake.outcome == 'success' }}
      uses: actions/cache/save@v3
      with:
        path: build
        key: ${{ runner.os }}-build

    - name: Upload error logs (in case of failure)
      if: always() && (steps.configure_cmake.conclusion == 'failure')
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
      with:
        name: linux_vcpkg_error-log
        path: |
          ${{ github.workspace }}/build/*/vcpkg-*.log
          ${{ github.workspace }}/.vcpkg-root/buildtrees/*/*.log

  build_wheels:
    name: Build wheels
    runs-on: ubuntu-24.04
    timeout-minutes: 120
    strategy:
      matrix:
        python-version: ["3.13"] #, "3.9", "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-tags: true
        fetch-depth: 0

    - run: |
        ./.ci/make_docker_wheels.bash
      env:
        GDT_PYTHON_VERSION: ${{ matrix.python-version }}

    - name: Upload wheels
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
      with:
        name: wheels_${{ matrix.python-version }}
        path: build/wheelhouse/final/
        if-no-files-found: error

  test_publish:
    name: Publish to Test PyPI
    runs-on: ubuntu-24.04
    needs: build_wheels
    timeout-minutes: 120
    environment: test-pypi
    permissions:
      # IMPORTANT: this permission is mandatory for PyPi Trusted Publishing
      id-token: write

    steps:
    - name: Download wheels
      uses: actions/download-artifact@v4
      with:
        pattern: wheels_*
        merge-multiple: true
        path: wheels/
    - run: |
        ls -l wheels/*
      shell: bash
    - name: Upload wheels to PyPI
      uses: pypa/gh-action-pypi-publish@v1.12.4
      id: upload-pypi_on_tag
      with:
        packages-dir: wheels/
        repository-url: https://test.pypi.org/legacy/
        verbose: true

  sonar:
    name: Run Sonar Scanner
    runs-on: ubuntu-24.04
    timeout-minutes: 120

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-tags: true
        fetch-depth: 0


    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ninja-build

    - name: Configure CMake
      id: configure_cmake
      run: cmake --preset=debug

    - name: SonarQube Scan
      uses: SonarSource/sonarqube-scan-action@v5.2.0
      with:
        args: >
          --define sonar.cfamily.compile-commands="build/debug/compile_commands.json"
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
