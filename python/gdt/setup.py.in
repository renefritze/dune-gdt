#!/usr/bin/env python
#
# ~~~
# This file is part of the dune-gdt project:
#   https://github.com/dune-community/dune-gdt
# Copyright 2010-2018 dune-gdt developers and contributors. All rights reserved.
# License: Dual licensed as BSD 2-Clause License (http://opensource.org/licenses/BSD-2-Clause)
#      or  GPL-2.0+ (http://opensource.org/licenses/gpl-license)
#          with "runtime exception" (http://www.dune-project.org/license.html)
# Authors:
#   Felix Schindler (2017)
#   Rene Fritze     (2016, 2018)
# ~~~

import sys
from pathlib import Path

from setuptools import setup, find_packages
from setuptools.dist import Distribution
from setuptools.command.install import install

requires = ["dune.xt==${PROJECT_VERSION}"]

extras_require = {
    "visualisation": [
        "dune-xt[visualisation]==${PROJECT_VERSION}",
    ],
    "infrastructure": [
        "dune-xt[infrastructure]==${PROJECT_VERSION}",
    ],
    "parallel": ["dune-xt[parallel]==${PROJECT_VERSION}"],
}

extras_require["all"] = [p for plist in extras_require.values() for p in plist]


class BinaryDistribution(Distribution):
    """Distribution which always forces a binary package with platform name"""

    def is_pure(self):
        return False

    def has_ext_modules(self):
        return True


class InstallPlatlib(install):
    def finalize_options(self):
        install.finalize_options(self)
        self.install_lib = self.install_platlib


setup(
    name="dune.gdt",
    version="${PROJECT_VERSION}",
    namespace_packages=["dune"],
    description="Python bindings for dune-gdt",
    long_description=open("README.md").read(),
    long_description_content_type="text/markdown",
    author="The dune-gdt devs",
    author_email="felix.schindler@uni-muenster.de",
    url="https://github.com/dune-gdt/dune-gdt",
    packages=find_packages(),
    package_data={"": ["*.so"]},
    include_package_data=True,
    cmdclass={
        "install": InstallPlatlib,
    },
    distclass=BinaryDistribution,
    install_requires=requires,
    extras_require=extras_require,
)
